{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590749114709_2034108693","id":"20200529-104514_1832634434","dateCreated":"2020-05-29T10:45:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:539","text":"%md\n# MBA with audioscrobbler\n## imports","dateUpdated":"2020-05-29T10:45:45+0000","dateFinished":"2020-05-29T10:45:48+0000","dateStarted":"2020-05-29T10:45:45+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>MBA with audioscrobbler</h1>\n<h2>imports</h2>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590749036482_-1759570951","id":"20200529-104356_357249297","dateCreated":"2020-05-29T10:43:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:227","text":"import org.apache.spark.sql.Dataset\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport scala.util.Random\nimport org.apache.spark.mllib.fpm.AssociationRules\nimport org.apache.spark.mllib.fpm.FPGrowth\nimport org.apache.spark.mllib.fpm.FPGrowth.FreqItemset","dateUpdated":"2020-05-29T11:01:13+0000","dateFinished":"2020-05-29T11:01:14+0000","dateStarted":"2020-05-29T11:01:13+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.Dataset\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\nimport scala.util.Random\nimport org.apache.spark.mllib.fpm.AssociationRules\nimport org.apache.spark.mllib.fpm.FPGrowth\nimport org.apache.spark.mllib.fpm.FPGrowth.FreqItemset\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590749059460_648103850","id":"20200529-104419_1869762308","dateCreated":"2020-05-29T10:44:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:419","text":"%md\n# Load data","dateUpdated":"2020-05-29T10:46:34+0000","dateFinished":"2020-05-29T10:46:35+0000","dateStarted":"2020-05-29T10:46:35+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Load data</h1>\n</div>"}]}},{"text":"// Load the play count schema\nval rawPlayCounts = spark.sparkContext.textFile(\"/data/user_artist_data.txt\")\nval rawArtistData = spark.sparkContext.textFile(\"/data/artist_data.txt\")\nval rawArtistAlias = spark.sparkContext.textFile(\"/data/artist_alias.txt\")\nrawPlayCounts.take(5).foreach(println)","user":"anonymous","dateUpdated":"2020-05-29T11:08:31+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590749194903_-1488373091","id":"20200529-104634_2049879777","dateCreated":"2020-05-29T10:46:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:645","dateFinished":"2020-05-29T10:59:15+0000","dateStarted":"2020-05-29T10:59:15+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1000002 1 55\n1000002 1000006 33\n1000002 1000007 8\n1000002 1000009 144\n1000002 1000010 314\nrawPlayCounts: org.apache.spark.rdd.RDD[String] = /data/user_artist_data.txt MapPartitionsRDD[7] at textFile at <console>:40\nrawArtistData: org.apache.spark.rdd.RDD[String] = /data/artist_data.txt MapPartitionsRDD[9] at textFile at <console>:41\nrawArtistAlias: org.apache.spark.rdd.RDD[String] = /data/artist_alias.txt MapPartitionsRDD[11] at textFile at <console>:42\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Convert to DataSet","user":"anonymous","dateUpdated":"2020-05-29T11:03:10+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590749241759_-1847855583","id":"20200529-104721_2063844306","dateCreated":"2020-05-29T10:47:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:743","dateFinished":"2020-05-29T11:03:10+0000","dateStarted":"2020-05-29T11:03:10+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Convert to DataSet</h2>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590750341363_930356056","id":"20200529-110541_825106953","dateCreated":"2020-05-29T11:05:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1125","text":"val artistByID = rawArtistData.flatMap { line =>\n    val (id, name) = line.span(_ != '\\t')\n    if (name.isEmpty()){\n        None\n    } else {\n        try {\n            Some((id.toInt, name.trim))\n        } catch{\n            case _: NumberFormatException => None\n        }\n  }\n}.toDF(\"id\", \"name\").cache()","dateUpdated":"2020-05-29T11:36:26+0000","dateFinished":"2020-05-29T11:36:28+0000","dateStarted":"2020-05-29T11:36:26+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"artistByID: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: int, name: string]\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590751073512_1241446847","id":"20200529-111753_1097578992","dateCreated":"2020-05-29T11:17:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2657","text":"val artistAlias = rawArtistAlias.flatMap { line =>\n      var Array(artist, alias) = line.split('\\t')\n      if (artist.isEmpty()) {\n        None\n      } else {\n        Some((artist.toInt, alias.toInt))\n      }\n}.collect().toMap\nval bArtistAlias = spark.sparkContext.broadcast(artistAlias)","dateUpdated":"2020-05-29T11:36:56+0000","dateFinished":"2020-05-29T11:36:59+0000","dateStarted":"2020-05-29T11:36:56+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"artistAlias: scala.collection.immutable.Map[Int,Int] = Map(1208690 -> 1003926, 2012757 -> 4569, 6949139 -> 1085752, 1109727 -> 1239120, 6772751 -> 1244705, 2070533 -> 1021544, 1157679 -> 2194, 9969617 -> 5630, 2034496 -> 1116214, 6764342 -> 40, 1272489 -> 1278238, 2108744 -> 1009267, 10349857 -> 1000052, 2145319 -> 1020463, 2126338 -> 2717, 10165456 -> 1001169, 6779368 -> 1239506, 10278137 -> 1001523, 9939075 -> 1329390, 2037201 -> 1274155, 1248585 -> 2885, 1106945 -> 1399, 6811322 -> 1019016, 9978396 -> 1784, 6676961 -> 1086433, 2117821 -> 2611, 6863616 -> 1277013, 6895480 -> 1000993, 6831632 -> 1246136, 1001719 -> 1009727, 10135633 -> 4250, 7029291 -> 1034635, 6967939 -> 1002734, 6864694 -> 1017311, 1237279 -> 1029752, 6793956 -> 1283231, 1208609 -> 1000699, 6693428 -> 1100258, 685174..."}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=6"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590751693610_977194535","id":"20200529-112813_127150251","dateCreated":"2020-05-29T11:28:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2908","text":"val userArtistDF = rawPlayCounts.map { line =>\n    val Array(userId, artistID, count) = line.split(' ').map(_.toInt)\n    val finalArtistID = bArtistAlias.value.getOrElse(artistID, artistID)\n    (userId, artistID, count)\n}.toDF(\"user\", \"artist\", \"count\").cache()\n\nuserArtistDF.show(5)","dateUpdated":"2020-05-29T11:40:32+0000","dateFinished":"2020-05-29T11:40:40+0000","dateStarted":"2020-05-29T11:40:32+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-------+-----+\n|   user| artist|count|\n+-------+-------+-----+\n|1000002|      1|   55|\n|1000002|1000006|   33|\n|1000002|1000007|    8|\n|1000002|1000009|  144|\n|1000002|1000010|  314|\n+-------+-------+-----+\nonly showing top 5 rows\n\nuserArtistDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [user: int, artist: int ... 1 more field]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=8"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590750459925_1348152663","id":"20200529-110739_1451215536","dateCreated":"2020-05-29T11:07:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1249","text":"%md\n# Create transactions","dateUpdated":"2020-05-29T11:11:19+0000","dateFinished":"2020-05-29T11:11:19+0000","dateStarted":"2020-05-29T11:11:19+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Create transactions</h1>\n</div>"}]}},{"text":"val itemsDF = userArtistDF\nitemsDF.groupBy(\"user\", \"artist\")\nitemsDF.show(5)\n\nspark.conf.set(\"spark.sql.pivotMaxValues\", 2000000)\n\nval transactions = itemsDF\ntransactions.groupBy(\"user\", \"artist\").pivot(\"artist\").sum(\"count\")\ntransactions.show(5)","user":"anonymous","dateUpdated":"2020-05-29T12:05:20+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590750679022_-471068489","id":"20200529-111119_479192922","dateCreated":"2020-05-29T11:11:19+0000","status":"RUNNING","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1403","dateFinished":"2020-05-29T12:04:06+0000","dateStarted":"2020-05-29T12:05:20+0000","errorMessage":"","results":{"msg":[{"data":"","type":"TEXT"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=14","http://172.17.0.2:4040/jobs/job?id=15","http://172.17.0.2:4040/jobs/job?id=16","http://172.17.0.2:4040/jobs/job?id=17","http://172.17.0.2:4040/jobs/job?id=18","http://172.17.0.2:4040/jobs/job?id=19","http://172.17.0.2:4040/jobs/job?id=20"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Create FPGrowth model for frequent pattern mining","user":"anonymous","dateUpdated":"2020-05-29T11:14:40+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590750858376_995039256","id":"20200529-111418_2096367753","dateCreated":"2020-05-29T11:14:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1496","dateFinished":"2020-05-29T11:14:40+0000","dateStarted":"2020-05-29T11:14:40+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Create FPGrowth model for frequent pattern mining</h2>\n</div>"}]}},{"text":"FPGrowthModel model = new FPGrowth().setItemsCol(\"items\").setMinSupport(0.5).setMinConfidence(0.6).fit(itemsDF);\n// Display frequent itemsets\nmodel.freqItemsets().show();\n// Display generated association\nrules.model.associationRules().show();\n// transform examines the input items against all the association rules and summarize the consequents as prediction\nmodel.transform(itemsDF).show();\n","user":"anonymous","dateUpdated":"2020-05-29T11:15:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1590750880281_-470861645","id":"20200529-111440_895362572","dateCreated":"2020-05-29T11:14:40+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1589"}],"name":"MBA_audioscrobbler","id":"2F9SCURCS","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}