{"paragraphs":[{"text":"%md\n# Music Recommendation using Spark MLib\n**BDA** MSE 2020\nAyrton Dumas, Marco Mattei & Samuel Torche","user":"anonymous","dateUpdated":"2020-06-05T11:44:45+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Music Recommendation using Spark MLib</h1>\n<p><strong>BDA</strong> MSE 2020<br/>Ayrton Dumas, Marco Mattei &amp; Samuel Torche</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1591357485302_-728525445","id":"20200515-085712_77617268","dateCreated":"2020-06-05T11:44:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:172"},{"text":"%md\n## importation","user":"anonymous","dateUpdated":"2020-06-05T11:44:45+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>importation</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1591357485320_766126296","id":"20200515-094050_1064013506","dateCreated":"2020-06-05T11:44:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"text":"%md\n","user":"anonymous","dateUpdated":"2020-06-05T11:44:45+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591357485322_878441616","id":"20200531-150626_803088839","dateCreated":"2020-06-05T11:44:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"text":"sc.version\n","user":"anonymous","dateUpdated":"2020-06-18T08:27:52+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: String = 2.2.1\n"}]},"apps":[],"jobName":"paragraph_1591357485324_-1274317088","id":"20200604-115123_398213708","dateCreated":"2020-06-05T11:44:45+0000","dateStarted":"2020-06-18T08:27:52+0000","dateFinished":"2020-06-18T08:28:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"text":"val rawUserArtistData = spark.read.textFile(\"/data/user_artist_data.txt\")\nrawUserArtistData.take(5).foreach(println)","user":"anonymous","dateUpdated":"2020-06-18T08:38:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1000002 1 55\n1000002 1000006 33\n1000002 1000007 8\n1000002 1000009 144\n1000002 1000010 314\nrawUserArtistData: org.apache.spark.sql.Dataset[String] = [value: string]\n"}]},"apps":[],"jobName":"paragraph_1591357485325_131401022","id":"20200515-091817_1415949822","dateCreated":"2020-06-05T11:44:45+0000","dateStarted":"2020-06-18T08:38:34+0000","dateFinished":"2020-06-18T08:39:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:176","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=0"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Data exploration","user":"anonymous","dateUpdated":"2020-06-05T11:44:45+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Data exploration</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1591357485327_2130854756","id":"20200515-092006_1449314714","dateCreated":"2020-06-05T11:44:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"text":"val userArtistDF = rawUserArtistData.map { line =>\n val Array(user, artist, _*) = line.split(' ')\n (user.toInt, artist.toInt)\n}.toDF(\"user\", \"artist\")\nuserArtistDF.agg(\n min(\"user\"), max(\"user\"), min(\"artist\"), max(\"artist\")).show()","user":"anonymous","dateUpdated":"2020-06-18T08:38:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+---------+-----------+-----------+\n|min(user)|max(user)|min(artist)|max(artist)|\n+---------+---------+-----------+-----------+\n|       90|  2443548|          1|   10794401|\n+---------+---------+-----------+-----------+\n\nuserArtistDF: org.apache.spark.sql.DataFrame = [user: int, artist: int]\n"}]},"apps":[],"jobName":"paragraph_1591357485328_109448420","id":"20200515-091945_1579731282","dateCreated":"2020-06-05T11:44:45+0000","dateStarted":"2020-06-18T08:38:39+0000","dateFinished":"2020-06-18T08:39:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:178","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}}},{"text":"val rawArtistAlias = spark.read.textFile(\"/data/artist_alias.txt\")\nval artistAlias = rawArtistAlias.flatMap { line =>\n val Array(artist, alias) = line.split('\\t')\n if (artist.isEmpty) {\n None\n } else {\n Some((artist.toInt, alias.toInt))\n }\n}.collect().toMap\nartistAlias.head","user":"anonymous","dateUpdated":"2020-06-18T08:38:40+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rawArtistAlias: org.apache.spark.sql.Dataset[String] = [value: string]\nartistAlias: scala.collection.immutable.Map[Int,Int] = Map(1208690 -> 1003926, 2012757 -> 4569, 6949139 -> 1085752, 1109727 -> 1239120, 6772751 -> 1244705, 2070533 -> 1021544, 1157679 -> 2194, 9969617 -> 5630, 2034496 -> 1116214, 6764342 -> 40, 1272489 -> 1278238, 2108744 -> 1009267, 10349857 -> 1000052, 2145319 -> 1020463, 2126338 -> 2717, 10165456 -> 1001169, 6779368 -> 1239506, 10278137 -> 1001523, 9939075 -> 1329390, 2037201 -> 1274155, 1248585 -> 2885, 1106945 -> 1399, 6811322 -> 1019016, 9978396 -> 1784, 6676961 -> 1086433, 2117821 -> 2611, 6863616 -> 1277013, 6895480 -> 1000993, 6831632 -> 1246136, 1001719 -> 1009727, 10135633 -> 4250, 7029291 -> 1034635, 6967939 -> 1002734, 6864694 -> 1017311, 1237279 -> 1029..."}]},"apps":[],"jobName":"paragraph_1591357485329_1012754492","id":"20200515-094134_490320359","dateCreated":"2020-06-05T11:44:45+0000","dateStarted":"2020-06-18T08:39:07+0000","dateFinished":"2020-06-18T08:39:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:179","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=2"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Building Model","user":"anonymous","dateUpdated":"2020-06-05T11:44:45+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Building Model</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1591357485330_120767799","id":"20200515-101217_1486280330","dateCreated":"2020-06-05T11:44:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"text":"import org.apache.spark.sql._\nimport org.apache.spark.broadcast._\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\n\nimport org.apache.spark.ml.feature.{ StringIndexerModel, VectorAssembler }\n\n\n\nimport spark.implicits._\n\ndef buildCounts( rawUserArtistData: Dataset[String], bArtistAlias: Broadcast[Map[Int,Int]]): DataFrame = {\n    rawUserArtistData.map { line =>\n        val Array(userID, artistID, count) = line.split(' ').map(_.toInt)\n        val finalArtistID = bArtistAlias.value.getOrElse(artistID, artistID)\n        (userID, finalArtistID, count)\n        \n    }.toDF(\"user\", \"artist\", \"count\")\n}\n\n\n\n// generate train data\nval bArtistAlias = spark.sparkContext.broadcast(artistAlias)\nval trainData = buildCounts(rawUserArtistData, bArtistAlias)\ntrainData.cache()\ntrainData.printSchema()\n\n\n","user":"anonymous","dateUpdated":"2020-06-18T09:22:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- user: integer (nullable = false)\n |-- artist: integer (nullable = false)\n |-- count: integer (nullable = false)\n\n+--------------------+\n|            features|\n+--------------------+\n|[1000002.0,1.0,55.0]|\n|[1000002.0,100000...|\n|[1000002.0,100000...|\n|[1000002.0,100000...|\n|[1000002.0,100001...|\n|[1000002.0,100001...|\n|[1000002.0,100001...|\n|[1000002.0,100001...|\n|[1000002.0,100002...|\n|[1000002.0,100002...|\n|[1000002.0,100002...|\n|[1000002.0,100003...|\n|[1000002.0,100003...|\n|[1000002.0,100004...|\n|[1000002.0,100004...|\n|[1000002.0,100005...|\n|[1000002.0,100005...|\n|[1000002.0,100005...|\n|[1000002.0,100005...|\n|[1000002.0,100006...|\n+--------------------+\nonly showing top 20 rows\n\nimport org.apache.spark.sql._\nimport org.apache.spark.broadcast._\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.ml.feature.{StringIndexerModel, VectorAssembler}\nimport spark.implicits._\nbuildCounts: (rawUserArtistData: org.apache.spark.sql.Dataset[String], bArtistAlias: org.apache.spark.broadcast.Broadcast[Map[Int,Int]])org.apache.spark.sql.DataFrame\nbArtistAlias: org.apache.spark.broadcast.Broadcast[scala.collection.immutable.Map[Int,Int]] = Broadcast(7)\ntrainData: org.apache.spark.sql.DataFrame = [user: int, artist: int ... 1 more field]\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_ee4f800a1d54\noutput: org.apache.spark.sql.DataFrame = [features: vector]\n"}]},"apps":[],"jobName":"paragraph_1591357485331_1290328430","id":"20200515-101219_1603616177","dateCreated":"2020-06-05T11:44:45+0000","dateStarted":"2020-06-18T08:39:35+0000","dateFinished":"2020-06-18T08:39:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:181","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=3"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1591950635454_82272759","id":"20200612-083035_334626955","dateCreated":"2020-06-12T08:30:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:182","text":"%md\n## Get unique users id","dateUpdated":"2020-06-18T09:22:58+0000","dateFinished":"2020-06-18T09:22:58+0000","dateStarted":"2020-06-18T09:22:58+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Get unique users id</h2>\n</div>"}]}},{"text":"// get unique users\nval unique_userdf = trainData.select($\"user\").distinct\nunique_userdf.cache","user":"anonymous","dateUpdated":"2020-06-18T08:39:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"unique_userdf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [user: int]\nres5: unique_userdf.type = [user: int]\n"}]},"apps":[],"jobName":"paragraph_1591358577392_267177747","id":"20200605-120257_297435421","dateCreated":"2020-06-05T12:02:57+0000","dateStarted":"2020-06-18T08:39:48+0000","dateFinished":"2020-06-18T08:39:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:183"},{"text":"%md\n### Get 3 top listened arist of each user","user":"anonymous","dateUpdated":"2020-06-05T12:10:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Get 3 top listened arist of each user</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1591359000513_-2125898135","id":"20200605-121000_43003032","dateCreated":"2020-06-05T12:10:00+0000","dateStarted":"2020-06-05T12:10:39+0000","dateFinished":"2020-06-05T12:10:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"text":"// get unique users\nval unique_userdf_small = trainData.select($\"user\").distinct().limit(20)\nunique_userdf_small.cache\n\nval res = unique_userdf_small.collect().map { r => \n  val uid = r.get(0)\n  val l = trainData.filter($\"user\" === uid).sort($\"count\".desc).limit(3).select($\"artist\").map(r => r.getInt(0)).collect\n  if(l.length == 3) {\n    (l(0), l(1), l(2))\n  } else {\n    (0,0,0)\n  }\n}\n","user":"anonymous","dateUpdated":"2020-06-18T08:54:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"unique_userdf_small: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [user: int]\nres: Array[(Int, Int, Int)] = Array((1005235,1004983,1239653), (1854,1000294,1086437), (1004701,1007969,1001943), (979,5837,1001531), (1000052,1007027,979), (1016344,1012594,1003276), (1000781,2016108,1000266), (1014421,5409,4465), (1002551,1001594,1000481), (1098697,1001819,1811), (1838,1003011,1237509), (1009393,1146561,1001920), (1330,1002751,5811), (1004162,1043666,1031071), (0,0,0), (1298659,2247,1010585), (1003258,606,1018389), (2221,1010615,1197576), (1019186,1223,1016652), (1001534,217,1010029))\n"}]},"apps":[],"jobName":"paragraph_1591950728913_-1359061354","id":"20200612-083208_391873423","dateCreated":"2020-06-12T08:32:08+0000","dateStarted":"2020-06-18T08:54:06+0000","dateFinished":"2020-06-18T09:06:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:186","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=20","http://172.17.0.2:4040/jobs/job?id=21","http://172.17.0.2:4040/jobs/job?id=22","http://172.17.0.2:4040/jobs/job?id=23","http://172.17.0.2:4040/jobs/job?id=24","http://172.17.0.2:4040/jobs/job?id=25","http://172.17.0.2:4040/jobs/job?id=26","http://172.17.0.2:4040/jobs/job?id=27","http://172.17.0.2:4040/jobs/job?id=28","http://172.17.0.2:4040/jobs/job?id=29","http://172.17.0.2:4040/jobs/job?id=30","http://172.17.0.2:4040/jobs/job?id=31","http://172.17.0.2:4040/jobs/job?id=32","http://172.17.0.2:4040/jobs/job?id=33","http://172.17.0.2:4040/jobs/job?id=34","http://172.17.0.2:4040/jobs/job?id=35","http://172.17.0.2:4040/jobs/job?id=36","http://172.17.0.2:4040/jobs/job?id=37","http://172.17.0.2:4040/jobs/job?id=38","http://172.17.0.2:4040/jobs/job?id=39","http://172.17.0.2:4040/jobs/job?id=40"],"interpreterSettingId":"spark"}}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592472215027_1418029873","id":"20200618-092335_160380185","dateCreated":"2020-06-18T09:23:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3964","text":"%md \n## Elbow method ","dateUpdated":"2020-06-18T09:23:55+0000","dateFinished":"2020-06-18T09:23:55+0000","dateStarted":"2020-06-18T09:23:55+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Elbow method</h2>\n</div>"}]}},{"text":"\n\nval resseq: Seq[(Int, Int,Int)] = res.toSeq\nval small_df = resseq.toDF(\"a\",\"b\",\"c\")\n    \nval assembler = new VectorAssembler()\n  .setInputCols(Array(\"a\", \"b\", \"c\"))\n  .setOutputCol(\"features\")\n\nval output = assembler.transform(small_df).select(\"features\")\noutput.show()\n\nval nums = Seq(3,4,5,6,7,8,9,10)\nfor (n <- nums) {\n    val kmeans = new KMeans().setK(n).setSeed(1L)\n    val model = kmeans.fit(output)\n    \n    // Evaluate clustering by computing Within Set Sum of Squared Errors.\n    val WSSSE = model.computeCost(output)\n    println(s\"Within Set Sum of Squared Errors = $WSSSE\")\n}\n\n","user":"anonymous","dateUpdated":"2020-06-18T09:23:34+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+\n|            features|\n+--------------------+\n|[1005235.0,100498...|\n|[1854.0,1000294.0...|\n|[1004701.0,100796...|\n|[979.0,5837.0,100...|\n|[1000052.0,100702...|\n|[1016344.0,101259...|\n|[1000781.0,201610...|\n|[1014421.0,5409.0...|\n|[1002551.0,100159...|\n|[1098697.0,100181...|\n|[1838.0,1003011.0...|\n|[1009393.0,114656...|\n|[1330.0,1002751.0...|\n|[1004162.0,104366...|\n|           (3,[],[])|\n|[1298659.0,2247.0...|\n|[1003258.0,606.0,...|\n|[2221.0,1010615.0...|\n|[1019186.0,1223.0...|\n|[1001534.0,217.0,...|\n+--------------------+\n\nWithin Set Sum of Squared Errors = 7.495206212909904E12\nWithin Set Sum of Squared Errors = 5.1817477571116875E12\nWithin Set Sum of Squared Errors = 2.964542431238825E12\nWithin Set Sum of Squared Errors = 2.2983690017333267E12\nWithin Set Sum of Squared Errors = 1.469828073180994E12\nWithin Set Sum of Squared Errors = 9.670555208699937E11\nWithin Set Sum of Squared Errors = 5.803673173234998E11\nWithin Set Sum of Squared Errors = 7.881763083799951E10\nresseq: Seq[(Int, Int, Int)] = WrappedArray((1005235,1004983,1239653), (1854,1000294,1086437), (1004701,1007969,1001943), (979,5837,1001531), (1000052,1007027,979), (1016344,1012594,1003276), (1000781,2016108,1000266), (1014421,5409,4465), (1002551,1001594,1000481), (1098697,1001819,1811), (1838,1003011,1237509), (1009393,1146561,1001920), (1330,1002751,5811), (1004162,1043666,1031071), (0,0,0), (1298659,2247,1010585), (1003258,606,1018389), (2221,1010615,1197576), (1019186,1223,1016652), (1001534,217,1010029))\nsmall_df: org.apache.spark.sql.DataFrame = [a: int, b: int ... 1 more field]\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_55380ec43dfe\noutput: org.apache.spark.sql.DataFrame = [features: vector]\nnums: Seq[Int] = List(3, 4, 5, 6, 7, 8, 9, 10)\n"}]},"apps":[],"jobName":"paragraph_1591951611325_-1271236441","id":"20200612-084651_173060704","dateCreated":"2020-06-12T08:46:51+0000","dateStarted":"2020-06-18T09:11:35+0000","dateFinished":"2020-06-18T09:11:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=41","http://172.17.0.2:4040/jobs/job?id=42","http://172.17.0.2:4040/jobs/job?id=43","http://172.17.0.2:4040/jobs/job?id=44","http://172.17.0.2:4040/jobs/job?id=45","http://172.17.0.2:4040/jobs/job?id=46","http://172.17.0.2:4040/jobs/job?id=47","http://172.17.0.2:4040/jobs/job?id=48","http://172.17.0.2:4040/jobs/job?id=49","http://172.17.0.2:4040/jobs/job?id=50","http://172.17.0.2:4040/jobs/job?id=51","http://172.17.0.2:4040/jobs/job?id=52","http://172.17.0.2:4040/jobs/job?id=53","http://172.17.0.2:4040/jobs/job?id=54","http://172.17.0.2:4040/jobs/job?id=55","http://172.17.0.2:4040/jobs/job?id=56","http://172.17.0.2:4040/jobs/job?id=57","http://172.17.0.2:4040/jobs/job?id=58","http://172.17.0.2:4040/jobs/job?id=59","http://172.17.0.2:4040/jobs/job?id=60","http://172.17.0.2:4040/jobs/job?id=61","http://172.17.0.2:4040/jobs/job?id=62","http://172.17.0.2:4040/jobs/job?id=63","http://172.17.0.2:4040/jobs/job?id=64","http://172.17.0.2:4040/jobs/job?id=65","http://172.17.0.2:4040/jobs/job?id=66","http://172.17.0.2:4040/jobs/job?id=67","http://172.17.0.2:4040/jobs/job?id=68","http://172.17.0.2:4040/jobs/job?id=69","http://172.17.0.2:4040/jobs/job?id=70","http://172.17.0.2:4040/jobs/job?id=71","http://172.17.0.2:4040/jobs/job?id=72","http://172.17.0.2:4040/jobs/job?id=73","http://172.17.0.2:4040/jobs/job?id=74","http://172.17.0.2:4040/jobs/job?id=75","http://172.17.0.2:4040/jobs/job?id=76","http://172.17.0.2:4040/jobs/job?id=77","http://172.17.0.2:4040/jobs/job?id=78","http://172.17.0.2:4040/jobs/job?id=79","http://172.17.0.2:4040/jobs/job?id=80","http://172.17.0.2:4040/jobs/job?id=81","http://172.17.0.2:4040/jobs/job?id=82","http://172.17.0.2:4040/jobs/job?id=83","http://172.17.0.2:4040/jobs/job?id=84","http://172.17.0.2:4040/jobs/job?id=85","http://172.17.0.2:4040/jobs/job?id=86","http://172.17.0.2:4040/jobs/job?id=87","http://172.17.0.2:4040/jobs/job?id=88","http://172.17.0.2:4040/jobs/job?id=89","http://172.17.0.2:4040/jobs/job?id=90","http://172.17.0.2:4040/jobs/job?id=91","http://172.17.0.2:4040/jobs/job?id=92","http://172.17.0.2:4040/jobs/job?id=93","http://172.17.0.2:4040/jobs/job?id=94","http://172.17.0.2:4040/jobs/job?id=95","http://172.17.0.2:4040/jobs/job?id=96","http://172.17.0.2:4040/jobs/job?id=97","http://172.17.0.2:4040/jobs/job?id=98","http://172.17.0.2:4040/jobs/job?id=99","http://172.17.0.2:4040/jobs/job?id=100","http://172.17.0.2:4040/jobs/job?id=101","http://172.17.0.2:4040/jobs/job?id=102","http://172.17.0.2:4040/jobs/job?id=103","http://172.17.0.2:4040/jobs/job?id=104","http://172.17.0.2:4040/jobs/job?id=105","http://172.17.0.2:4040/jobs/job?id=106","http://172.17.0.2:4040/jobs/job?id=107","http://172.17.0.2:4040/jobs/job?id=108","http://172.17.0.2:4040/jobs/job?id=109","http://172.17.0.2:4040/jobs/job?id=110","http://172.17.0.2:4040/jobs/job?id=111","http://172.17.0.2:4040/jobs/job?id=112","http://172.17.0.2:4040/jobs/job?id=113","http://172.17.0.2:4040/jobs/job?id=114","http://172.17.0.2:4040/jobs/job?id=115","http://172.17.0.2:4040/jobs/job?id=116","http://172.17.0.2:4040/jobs/job?id=117","http://172.17.0.2:4040/jobs/job?id=118","http://172.17.0.2:4040/jobs/job?id=119","http://172.17.0.2:4040/jobs/job?id=120"],"interpreterSettingId":"spark"}}},{"text":"%md\n## Clustering\n","user":"anonymous","dateUpdated":"2020-06-05T11:44:45+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Clustering</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1591357485332_-712879938","id":"20200604-112844_84929119","dateCreated":"2020-06-05T11:44:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:188"},{"text":"import org.apache.spark.ml.clustering.KMeans\n\n// KMEANS CLUSTERING\n\n\nval nums = Seq(3,4,5,6,7,8,9,10)\nfor (n <- nums) {\n    val kmeans = new KMeans().setK(n).setSeed(1L)\n    val model = kmeans.fit(output)\n    \n    // Evaluate clustering by computing Within Set Sum of Squared Errors.\n    val WSSSE = model.computeCost(output)\n    println(s\"Within Set Sum of Squared Errors = $WSSSE\")\n}\n\n\n\n   ","user":"anonymous","dateUpdated":"2020-06-18T09:11:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Within Set Sum of Squared Errors = 7.495206212909904E12\nWithin Set Sum of Squared Errors = 5.1817477571116875E12\nWithin Set Sum of Squared Errors = 2.964542431238825E12\nWithin Set Sum of Squared Errors = 2.2983690017333267E12\nWithin Set Sum of Squared Errors = 1.469828073180994E12\nWithin Set Sum of Squared Errors = 9.670555208699937E11\nWithin Set Sum of Squared Errors = 5.803673173234998E11\nWithin Set Sum of Squared Errors = 7.881763083799951E10\nimport org.apache.spark.ml.clustering.KMeans\nnums: Seq[Int] = List(3, 4, 5, 6, 7, 8, 9, 10)\n"}]},"apps":[],"jobName":"paragraph_1591357485333_291690107","id":"20200604-112902_1482377755","dateCreated":"2020-06-05T11:44:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:189","dateFinished":"2020-06-18T09:11:55+0000","dateStarted":"2020-06-18T09:11:43+0000","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=121","http://172.17.0.2:4040/jobs/job?id=122","http://172.17.0.2:4040/jobs/job?id=123","http://172.17.0.2:4040/jobs/job?id=124","http://172.17.0.2:4040/jobs/job?id=125","http://172.17.0.2:4040/jobs/job?id=126","http://172.17.0.2:4040/jobs/job?id=127","http://172.17.0.2:4040/jobs/job?id=128","http://172.17.0.2:4040/jobs/job?id=129","http://172.17.0.2:4040/jobs/job?id=130","http://172.17.0.2:4040/jobs/job?id=131","http://172.17.0.2:4040/jobs/job?id=132","http://172.17.0.2:4040/jobs/job?id=133","http://172.17.0.2:4040/jobs/job?id=134","http://172.17.0.2:4040/jobs/job?id=135","http://172.17.0.2:4040/jobs/job?id=136","http://172.17.0.2:4040/jobs/job?id=137","http://172.17.0.2:4040/jobs/job?id=138","http://172.17.0.2:4040/jobs/job?id=139","http://172.17.0.2:4040/jobs/job?id=140","http://172.17.0.2:4040/jobs/job?id=141","http://172.17.0.2:4040/jobs/job?id=142","http://172.17.0.2:4040/jobs/job?id=143","http://172.17.0.2:4040/jobs/job?id=144","http://172.17.0.2:4040/jobs/job?id=145","http://172.17.0.2:4040/jobs/job?id=146","http://172.17.0.2:4040/jobs/job?id=147","http://172.17.0.2:4040/jobs/job?id=148","http://172.17.0.2:4040/jobs/job?id=149","http://172.17.0.2:4040/jobs/job?id=150","http://172.17.0.2:4040/jobs/job?id=151","http://172.17.0.2:4040/jobs/job?id=152","http://172.17.0.2:4040/jobs/job?id=153","http://172.17.0.2:4040/jobs/job?id=154","http://172.17.0.2:4040/jobs/job?id=155","http://172.17.0.2:4040/jobs/job?id=156","http://172.17.0.2:4040/jobs/job?id=157","http://172.17.0.2:4040/jobs/job?id=158","http://172.17.0.2:4040/jobs/job?id=159","http://172.17.0.2:4040/jobs/job?id=160","http://172.17.0.2:4040/jobs/job?id=161","http://172.17.0.2:4040/jobs/job?id=162","http://172.17.0.2:4040/jobs/job?id=163","http://172.17.0.2:4040/jobs/job?id=164","http://172.17.0.2:4040/jobs/job?id=165","http://172.17.0.2:4040/jobs/job?id=166","http://172.17.0.2:4040/jobs/job?id=167","http://172.17.0.2:4040/jobs/job?id=168","http://172.17.0.2:4040/jobs/job?id=169","http://172.17.0.2:4040/jobs/job?id=170","http://172.17.0.2:4040/jobs/job?id=171","http://172.17.0.2:4040/jobs/job?id=172","http://172.17.0.2:4040/jobs/job?id=173","http://172.17.0.2:4040/jobs/job?id=174","http://172.17.0.2:4040/jobs/job?id=175","http://172.17.0.2:4040/jobs/job?id=176","http://172.17.0.2:4040/jobs/job?id=177","http://172.17.0.2:4040/jobs/job?id=178","http://172.17.0.2:4040/jobs/job?id=179","http://172.17.0.2:4040/jobs/job?id=180","http://172.17.0.2:4040/jobs/job?id=181","http://172.17.0.2:4040/jobs/job?id=182","http://172.17.0.2:4040/jobs/job?id=183","http://172.17.0.2:4040/jobs/job?id=184","http://172.17.0.2:4040/jobs/job?id=185","http://172.17.0.2:4040/jobs/job?id=186","http://172.17.0.2:4040/jobs/job?id=187","http://172.17.0.2:4040/jobs/job?id=188","http://172.17.0.2:4040/jobs/job?id=189","http://172.17.0.2:4040/jobs/job?id=190","http://172.17.0.2:4040/jobs/job?id=191","http://172.17.0.2:4040/jobs/job?id=192","http://172.17.0.2:4040/jobs/job?id=193","http://172.17.0.2:4040/jobs/job?id=194","http://172.17.0.2:4040/jobs/job?id=195","http://172.17.0.2:4040/jobs/job?id=196","http://172.17.0.2:4040/jobs/job?id=197","http://172.17.0.2:4040/jobs/job?id=198","http://172.17.0.2:4040/jobs/job?id=199","http://172.17.0.2:4040/jobs/job?id=200"],"interpreterSettingId":"spark"}}},{"text":"%python\nimport matplotlib.pyplot as plt\n\ndatas = [[3, 1.2445173257535345E19], [4,7.2132628707644774E18], [5,3.2724949687905096E18], [6,3.1214615696898002E18], [7,1.93926729786017075E18], [8,1.66029903556209408E18], [9,9.7151945175618534E17], [10,1.01901052435793869E18]]\n\ny = [1.2445173257535345E19,7.2132628707644774E18,3.2724949687905096E18, 3.1214615696898002E18, 1.93926729786017075E18,1.66029903556209408E18,9.7151945175618534E17, 1.01901052435793869E18]\nx = [3,4,5,6,7,8,9,10]\n\nplt.plot(x,y)\n","user":"anonymous","dateUpdated":"2020-06-05T11:45:30+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[<matplotlib.lines.Line2D at 0x7f7f8d51d6d0>]<matplotlib.figure.Figure at 0x7f7f8d55c2d0>\n"},{"type":"IMG","data":"\n"}]},"apps":[],"jobName":"paragraph_1591357485334_-2007780164","id":"20200605-094101_25537414","dateCreated":"2020-06-05T11:44:45+0000","dateStarted":"2020-06-05T11:45:30+0000","dateFinished":"2020-06-05T11:45:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:190"}],"name":"Music Recommandation","id":"2FAAZSV21","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}